Здесь представлена шпаргалка по командам Git

Git

для macOS — Cmd+Space, затем ввести terminal.

pwd - путь к текущей директории

cd ~ перейти к домашней директории

ls - отобразить содержимое директории

cd .. вернуться в родительскую директорию

Флаг, или ключ, добавляют к команде, чтобы модифицировать её выполнение.

ls -a  - вывести скрытые файлы/расширенный список

ls ~ выведет содержимое домашней директории

ls .. покажет содержимое родительской директории.


Операции с папками и файлами: создание, копирование, перемещение

Создание файлов и директорий — touch, mkdir

touch %ИМЯ_ФАЙЛА% - создать файл
touch my-new-file.txt 


mkdir - создать директорию
mkdir new-dir

mkdir -p   - создать целую структуру директорий
mkdir -p dir1/dir-inside/dir-deeper-inside

touch ../../file.txt создаст файл file.txt на две папки выше по иерархии


cp - копирование файлов

cp что_копируем куда_копируем
cp что_копируем что_копируем что_копируем куда_копируем

---------------------- 
$ mkdir first-project   
$ touch first-project/data.txt first-project/table.csv 
cd first-project
cp data.txt ~
---------------------- 


mv - удалить файл в одном месте и создать в другом

Операции с папками и файлами: чтение и удаление

cat - прочитать файл 
cat myfile.txt

Удаление файлов и папок — rm, rmdir, rm -r


rm имя файла.txt - удалить файл
rmdir имя папки - Удалить папку

rm -r images # удалили папку images со всем её содержимым из текущей директории 



С помощью && можно выполнить несколько команд сразу — одну за другой.


---------------------- 
git version  

Все глобальные настройки Git хранит в файле .gitconfig в домашней директории.

cat ~/.gitconfig 
Или
git config --list 


Инициализируем репозиторий

Сделать папку репозиторием — git init
git init - сделать Git-репозиторием

«Разгитить» папку, если что-то пошло не так, — rm -rf .git

Проверить состояние репозитория — git status


Добавляем файлы в репозиторий

$ git add --all # подготовили к сохранению все файлы в репозитории
$ git status # проверили статус 


Команда git add позволяет подготовить файл к сохранению.
Команда git add --all подготовит к сохранению сразу все файлы.
С помощью git add . можно добавить в репозиторий текущую папку со всеми файлами.


Выполнить коммит — git commit

git commit -m 'Мой первый коммит!'

Коммит гарантирует, что изменения будут сохранены в истории и при необходимости к ним можно будет «откатиться»

Просмотреть историю коммитов — git log

-----------------

##Хеш

Git преобразует информацию о коммитах с помощью алгоритма SHA-1 и для каждого из них рассчитывает уникальный идентификатор — хеш.


Хеш — основной идентификатор коммита и позволяет узнать его автора, дату и содержимое закоммиченных файлов.


Все хеши, а также таблицу соответствий хеш → информация о коммите Git хранит в папке .git.


##Логи


Можно вызвать не только полный лог, но и сокращённый — это делается командой git log --oneline.


В сокращённом логе выводятся сокращённые хеши — их можно использовать точно так же, как и полные.


##HEAD


В числе прочих файлов в папке .git есть служебный файл HEAD. Он указывает на самый свежий коммит.


Вместо хеша последнего коммита можно написать слово HEAD — Git вас поймёт.



